name: CI - Tests

on:
  push:
    branches: ["**"]
  pull_request:

permissions:
  contents: read

concurrency:
  group: ci-tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-tests:
    name: Backend (pytest)
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
      DATABASE_URL: "sqlite+pysqlite:///:memory:"
      ENV_NAME: test
      REDIS_URL: redis://localhost:6379/0
      BACKEND_PUBLIC_URL: http://localhost:8000
      FRONTEND_URL: http://localhost:5173
      MAGIC_TOKEN_TTL: "900"
      SESSION_TTL_DAYS: "1"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip

      - name: Install backend deps
        run: |
          python -m pip install --upgrade pip
          if [ -f app/requirements.txt ]; then pip install -r app/requirements.txt; fi
          if [ -f app/requirements-dev.txt ]; then pip install -r app/requirements-dev.txt; fi

      - name: Run pytest (capture summary)
        run: |
          set -o pipefail
          pytest --cov=app --cov-report=term-missing -m "not integration" | tee backend-coverage.txt
          coverage xml -o coverage.xml || true
          coverage html -d htmlcov || true

      - name: Append backend summary to job summary
        if: always()
        run: |
          echo "## 🐍 Backend Coverage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Terminal report" >> $GITHUB_STEP_SUMMARY
          echo '```text' >> $GITHUB_STEP_SUMMARY
          tail -n 200 backend-coverage.txt >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload backend coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-backend-${{ github.sha }}
          path: |
            backend-coverage.txt
            ./.coverage
            ./coverage.xml
            ./htmlcov/**
          if-no-files-found: ignore

  frontend-tests:
    name: Frontend (vitest)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install deps (ensure coverage provider)
        working-directory: frontend
        run: |
          npm ci || npm install
          npm i -D @vitest/coverage-v8

      - name: Run vitest (text + json-summary + html)
        working-directory: frontend
        run: |
          set -o pipefail
          npx vitest run \
            --coverage.enabled \
            --coverage.provider=v8 \
            --coverage.all=true \
            --coverage.include='src/**/*.{js,jsx,ts,tsx}' \
            --coverage.reporter=text \
            --coverage.reporter=json-summary \
            --coverage.reporter=html \
            | tee coverage/terminal.txt
      - name: Append frontend coverage (HTML table) to job summary
        if: always()
        working-directory: frontend
        run: |
          set -e
          HTML_FILE="coverage/index.html"
          OUT_FRAGMENT="coverage/summary-fragment.html"

          if [ ! -f "$HTML_FILE" ]; then
            echo "coverage/index.html not found"
            exit 0
          fi

          # Node script: extract the coverage summary table (no external deps)
          node - <<'NODE'
          const fs = require('fs');
          const path = 'coverage/index.html';
          const html = fs.readFileSync(path, 'utf8');

          // Try to capture the main coverage table with class "coverage-summary"
          const tableRe = /<table[^>]*class=["'][^"']*coverage-summary[^"']*["'][^>]*>[\s\S]*?<\/table>/i;
          const anyTableRe = /<table[^>]*>[\s\S]*?<\/table>/i;

          let match = html.match(tableRe);
          if (!match) match = html.match(anyTableRe);

          const fragment = match ? match[0] : '<p><em>No coverage table found in coverage/index.html</em></p>';
          fs.writeFileSync('coverage/summary-fragment.html', fragment, 'utf8');
          NODE

          echo "## ⚛️ Frontend Coverage (HTML table)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>Open coverage table</summary>" >> $GITHUB_STEP_SUMMARY
          # Inject a minimal note so it looks OK without CSS
          echo '<p><em>Note:</em> Styles and JS are stripped in GitHub summaries; this is a plain HTML table.</p>' >> $GITHUB_STEP_SUMMARY
          cat "$OUT_FRAGMENT" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
          if [ -f coverage/coverage-summary.json ]; then
            node -e "const s=require('./coverage/coverage-summary.json').total; \
              const row=(k)=>\`| \${k} | \${s[k].pct}% | \${s[k].covered}/\${s[k].total} |\`; \
              console.log('### Totals'); \
              console.log('| Metric | % | Covered/Total |'); \
              console.log('|---|---:|---:|'); \
              console.log(row('lines')); \
              console.log(row('branches')); \
              console.log(row('functions')); \
              console.log(row('statements'));" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
      - name: Upload frontend coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-frontend-${{ github.sha }}
          path: |
            frontend/coverage/terminal.txt
            frontend/coverage/coverage-summary.json
            frontend/coverage/**
          if-no-files-found: ignore
