# docker-compose.yml
name: flask-ecr-eks-starter

services:
  web:
    environment:
      - PYTHONPATH=/          # so Python can see /app as the "app" package (path "/" contains "app")
    build:
      context: ..
      dockerfile: docker/web.Dockerfile
    image: yourapp/web:${TAG:-dev}
    env_file:
      - ./.env.dev
    depends_on:
      - db
      - redis
    ports:
      - "${WEB_PORT:-8000}:8000"
    volumes:
      # keep live-reload code mount
      - ../app:/app:cached
      # mount gunicorn config to a path NOT under /app, so it won't be shadowed
      - ../docker/gunicorn_conf.py:/etc/gunicorn/gunicorn_conf.py:ro
    command: >
      sh -c "gunicorn app.wsgi:app -c /etc/gunicorn/gunicorn_conf.py"

  db:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-appdb}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data

  frontend:
    build:
      context: ..
      dockerfile: docker/frontend.Dockerfile   # production Dockerfile
    image: yourapp/frontend:${TAG:-latest}
    depends_on:
      - web
    ports:
      - "80:80"                                # serve built static files via nginx
    environment:
      - NODE_ENV=production



volumes:
  pgdata:
  redisdata:
  frontend_node_modules:

